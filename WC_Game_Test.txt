// export default class WC_Game extends Phaser.Scene {
// 	private theme: string = "Mirror";
//     private word: string;
//     private letters: string[];
//     private slots: Phaser.GameObjects.Rectangle[];
//     private letterSprites: Phaser.GameObjects.Text[];
//     private dragStartPositions: Map<Phaser.GameObjects.Text, { x: number; y: number }>;

// 	constructor() {
// 		super("WC_Game");
// 	}

// 	init({ theme }: { theme: string }): void {
// 		this.theme = theme;
// 	}

// 	editorCreate(): void {
// 		this.events.emit("scene-awake");
// 	}

// 	create(): void {
// 		this.editorCreate();
// 		this.events.emit("updateUI", "show_exit_button");
// 		this.events.emit("updateUI", "change_background", "#ffffff"); // Notify UI

//         this.word = 'PHASER';
//         this.letters = this.word.split('');
//         this.slots = [];
//         this.letterSprites = [];
//         this.dragStartPositions = new Map();
        
//         this.physics.world.setBounds(0, 0, 800, 600);
        
//         // Create slots for letters
//         this.letters.forEach((letter: string, index: number) => {
//             let slot: Phaser.GameObjects.Rectangle = this.add.rectangle(200 + index * 60, 300, 50, 50, 0xffffff)
//                 .setStrokeStyle(2, 0x000000);
//             this.slots.push(slot);
//         });

//         // Create letter sprites
//         this.letters.forEach((letter: string, index: number) => {
//             let x: number = Phaser.Math.Between(100, 700);
//             let y: number = Phaser.Math.Between(100, 500);
//             let letterSprite: Phaser.GameObjects.Text = this.add.text(x, y, letter, { fontSize: '32px', color: '#000' })
//                 .setOrigin(0.5);
//             this.physics.add.existing(letterSprite);
//             let body = letterSprite.body as Phaser.Physics.Arcade.Body;
//             body.setCollideWorldBounds(true);
//             body.setSlideFactor(0.2);
//             body.setDamping(true);
//             body.setFriction(100, 100);
//             body.setDrag(0.2);
//             body.setCircle(20, -10, -10);
//             body.moves=true;  
//             body.pushable=true;          
//             body.setAllowGravity(false);
//             letterSprite.setInteractive({ draggable: true });
            
//             this.letterSprites.push(letterSprite);
//         });

//         this.physics.add.collider(this.letterSprites, this.letterSprites);

//         this.input.on('dragstart', (pointer: Phaser.Input.Pointer, gameObject: Phaser.GameObjects.Text) => {
//             let body = gameObject.body as Phaser.Physics.Arcade.Body;
//             body.setVelocity(0, 0);
//             body.directControl=true;
//         });
//         this.input.on('drag', (pointer: Phaser.Input.Pointer, gameObject: Phaser.GameObjects.Text, dragX: number, dragY: number) => {
//             // let body = gameObject.body as Phaser.Physics.Arcade.Body;
//             this.dragStartPositions.set(gameObject, { x: pointer.velocity.x, y: pointer.velocity.y });
//             let body = gameObject.body as Phaser.Physics.Arcade.Body;
//             gameObject.x = dragX;
//             gameObject.y = dragY;
//         });

//         this.input.on('dragend', (pointer: Phaser.Input.Pointer, gameObject: Phaser.GameObjects.Text) => {
//             let startPos = this.dragStartPositions.get(gameObject);
//             if (startPos) {
//                 let velocityX: number = (gameObject.x - startPos.x) * 5;
//                 let velocityY: number = (gameObject.y - startPos.y) * 5;
//                 let body = gameObject.body as Phaser.Physics.Arcade.Body;
//                 body.directControl=false;
//                 body.setVelocity(startPos.x, startPos.y);
//             }
            
//             let correctIndex: number = this.letters.indexOf(gameObject.text);
//             let slot: Phaser.GameObjects.Rectangle = this.slots[correctIndex];
            
//             if (Phaser.Math.Distance.Between(gameObject.x, gameObject.y, slot.x, slot.y) < 30) {
//                 gameObject.x = slot.x;
//                 gameObject.y = slot.y;
//                 let body = gameObject.body as Phaser.Physics.Arcade.Body;
//                 body.setVelocity(0, 0);
//                 body.setAllowGravity(false);
//                 slot.setFillStyle(0x00ff00);
//             } else {
//                 this.tweens.add({
//                     targets: slot,
//                     x: '+=10',
//                     duration: 50,
//                     yoyo: true,
//                     repeat: 3
//                 });
//                 slot.setFillStyle(0xff0000);
//             }
//         });
// 	}
// }